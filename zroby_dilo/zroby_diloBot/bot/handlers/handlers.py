import logging

from aiogram import F
from aiogram import types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext


from aiogram_forms import FormsManager

from .dispatcher import dp, router, bot
from ..models import *
from ..forms import *
from ..views import *
from .filters import *
from ..infrastructure.enums import *

import asyncio



@dp.message(Command(commands=['start']))
async def start_command(message: types.Message):
    intro = "–ó—Ä–æ–±–∏-–¥—ñ–ª–æ –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –≤–∫–∞–∂–∏ —Å–≤–æ—é —Ü—ñ–ª—å —ñ –ø—Ä—è–º—É–π –¥–æ –Ω–µ—ó. –ö–ª–∏—á—Ç–µ /help –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂—É"
    kb = [[types.KeyboardButton(text='/add_aim')]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(intro, reply_markup=keyboard)



@dp.message(Command(commands=['help']))
async def help_command(message: types.Message):
    HELPFUL_REPLY = f"/start‚Äì –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ —ñ–∑ –±–æ—Ç–æ–º" \
                    f"\n/help‚Äì–¥–æ–ø–æ–º–æ–≥–∞" \
                    f"\n/add_aim, add‚Äì —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ —Ü—ñ–ª—ñ, –Ω–∞–∑–≤—É –≤–≤–æ–¥—å—Ç–µ –≤ —ñ–º–ø–µ—Ä–∞—Ç–∏–≤—ñ" \
                    f"\n/cancel_add, cancel‚Äì —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –¥–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å" \
                    f"\n/todo_list, /todo, /td‚Äì –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫—É —Å–ø–∏—Å–∫—É —Å–ø—Ä–∞–≤ —ñ —Ü—ñ–ª–µ–π," \
                    f" —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ–∑—Ä–æ–±–ª–µ–Ω—ñ, –¥–æ–ø–∏—à—ñ—Ç—å todo," \
                    f" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –¥–æ–ø–∏—à—ñ—Ç—å done," \
                    f" –∞–±–∏ –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ‚Äì –ø–∏—à—ñ—Ç—å all," \
                    f" –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–æ–¥‚Äì —Ü–µ todo"

    await message.answer(HELPFUL_REPLY)


@dp.message(Command(commands=['add_aim', 'add']))
async def add_aim_command(message: types.Message, forms: FormsManager):
    await forms.show('aimform')


@dp.message(Command(commands=['cancel_add', 'cancel']))
async def cancel_add_command(message: types.Message, state: FSMContext):
    if state.get_state():
        state.clear()
        await message.answer('–ø–µ—Ä–µ–¥—É–º–∞–ª–∏üôÉ')

    else:
        return




@dp.message(Command(commands=['todo', 'todo_list', 'td']), AftercommandFullCheck(allow_no_argument=True, modes=TodoListModes))
async def todo_list_command(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    properties = {'user_id': user_id}
    if command.args:
        mode = command.args
        properties['mode'] = mode

    user_todo_list = await todo_list(**properties)
    await message.answer(user_todo_list)

