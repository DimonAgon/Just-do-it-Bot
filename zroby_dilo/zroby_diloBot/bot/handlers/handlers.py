import logging

from aiogram import F
from aiogram import types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext


from aiogram_forms import FormsManager

from .dispatcher import dp, router, bot
from ..models import *
from ..forms import *
from ..views import *
from .filters import *
from ..infrastructure.enums import *

import asyncio



@dp.message(Command(commands=['start']))
async def start_command(message: types.Message):
    intro = "–ó—Ä–æ–±–∏ –¥—ñ–ª–æ –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è,–≤–∫–∞–∂–∏ —Å–≤–æ—é —Ü—ñ–ª—å —ñ –ø—Ä—è–º—É–π –¥–æ –Ω–µ—ó. " \


    await message.answer(intro)


@dp.message(Command(commands=['help']))
async def help_command(message: types.Message):
    HELPFUL_REPLY = f"/start‚Äì –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ —ñ–∑ –±–æ—Ç–æ–º" \
                    f"\n/help‚Äì–¥–æ–ø–æ–º–æ–≥–∞" \
                    f"\n/add_task‚Äì —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —ñ–∑ —Å–ø—Ä–∞–≤ (—â–æ—Å—å –ø—Ä–æ—Å—Ç–µ, –Ω–∞–ø. –ø–æ–º–∏—Ç–∏ –∫–æ—Ç–∞)" \
                    f"\n/add_objective‚Äì –¥–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å –Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É (–Ω–∞–∫—à—Ç–∞–ª—Ç –∫—É–ø–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å)" \
                    f"\n/cancel_add‚Äì —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –¥–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å" \
                    f"\n/todo_list, /todo, /td‚Äì –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–ª–∏–∫—É —Å–ø–∏—Å–∫—É —Å–ø—Ä–∞–≤ —ñ —Ü—ñ–ª–µ–π, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ–∑—Ä–æ–±–ª–µ–Ω—ñ, –¥–æ–ø–∏—à—ñ—Ç—å todo, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –¥–æ–ø–∏—à—ñ—Ç—å done, –∞–±–∏ –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ‚Äì –ø–∏—à—ñ—Ç—å all, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–æ–¥‚Äì —Ü–µ all"

    await message.answer(HELPFUL_REPLY)


def notifications_times(add_datetime, deadline):
    time_diff = deadline - add_datetime
    notification_times = min(time_diff.days // 3, 3)
    return notification_times

async def notify(aim: models.Model, user_id):
    now = datetime.datetime.now()
    add_datetime, deadline = aim.add_datetime, aim.deadline
    times = notifications_times(add_datetime, deadline)
    for t in range(times):
        period = t/times
        asyncio.sleep((period-now).seconds)
        bot.send_message(user_id, aim.name)


@dp.message(Command(commands=['add_objective']))
async def add_objective_command(message: types.Message, forms: FormsManager):
   await forms.show('objectiveform')


@dp.message(Command(commands=['add_task']))
async def add_task_command(message: types.Message, forms: FormsManager):
   await forms.show('taskform')


@dp.message(Command(commands=['cancel_add']))
async def cancel_add_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–ø–µ—Ä–µ–¥—É–º–∞–ª–∏üôÉ')


@dp.message(Command(commands='todo, todo_list, td'))
async def todo_list_command(message: types.Message, command: CommandObject):
    mode = command.args
    user_id = message.from_user.id

    user_todo_list = await todo_list(user_id, mode)
    await message.answer(user_todo_list)

